{"version":3,"sources":["components/Citation.js","components/App.js","serviceWorker.js","index.js","citations.js"],"names":["Citation","react_default","a","createElement","this","props","details","citation","auteur","React","Component","App","state","genererCitation","event","keyArray","Object","keys","citations","randomKey","Math","floor","random","length","_this","setState","_this2","components_Citation","onClick","e","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","citation1","citation2","citation3","citation4","citation5","citation6","citation7","citation8","citation9","citation10"],"mappings":"oNAceA,mLATb,OACCC,EAAAC,EAAAC,cAAA,SACEC,KAAKC,MAAMC,QAAQC,SACpBN,EAAAC,EAAAC,cAAA,YAAOC,KAAKC,MAAMC,QAAQE,gBALPC,IAAMC,WCyCdC,6MAtCXC,MAAQ,KAORC,gBAAkB,SAAAC,GAEd,IAAMC,EAAWC,OAAOC,KAAKC,KAEvBC,EAAYJ,EAASK,KAAKC,MAAMD,KAAKE,SAAWP,EAASQ,SAE3DC,EAAKC,SAASlB,WAAaW,IAAUC,GAAWZ,SAKpDiB,EAAKC,SAASP,IAAUC,IAJpBK,EAAKX,uGAXTT,KAAKS,mDAmBA,IAAAa,EAAAtB,KACL,OAASH,EAAAC,EAAAC,cAAA,WAELF,EAAAC,EAAAC,cACAwB,EADA,CACSrB,QACLF,KAAKQ,QAJJ,IAMFX,EAAAC,EAAAC,cAAA,UACIyB,QACH,SAAAC,GAAC,OAAIH,EAAKb,gBAAgBgB,KAF3B,uBANE,YAzBCpB,IAAMC,WCQJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gCE/HnBC,EAAOC,QAAU,CACfC,UAAW,CACTxC,OAAQ,UACRD,SAAU,iEAEZ0C,UAAW,CACTzC,OAAQ,YACRD,SAAU,uGAEZ2C,UAAW,CACT1C,OAAQ,sBACRD,SAAU,sDAEZ4C,UAAW,CACT3C,OAAQ,SACRD,SAAU,+EAEZ6C,UAAW,CACT5C,OAAQ,mBACRD,SAAU,0GAEZ8C,UAAW,CACT7C,OAAQ,WACRD,SAAU,qEAEZ+C,UAAW,CACT9C,OAAQ,WACRD,SAAU,iEAEZgD,UAAW,CACT/C,OAAQ,cACRD,SAAU,+EAEZiD,UAAW,CACThD,OAAQ,SACRD,SAAU,sFAEZkD,WAAY,CACVjD,OAAQ,YACRD,SAAU","file":"static/js/main.73e2c7f9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Reprend en props la variable state du composant dans lequel elle sera utilisée\r\nclass Citation extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<p> \r\n\t\t\t\t{this.props.details.citation}\r\n\t\t\t\t<span>{this.props.details.auteur}</span>\r\n\t\t\t</p>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Citation;","import React from 'react';\r\nimport citations from '../citations.js';\r\nimport Citation from './Citation.js';\r\n\r\nclass App extends React.Component {\r\n    //variable state indéfinie \r\n    state = {};\r\n    //Méthode REACT pour charger une première citation au chargement de la classe App\r\n    componentWillMount() {\r\n        this.genererCitation();\r\n    }\r\n\r\n    // Création de l'évènement qui change les citations\r\n    genererCitation = event => {\r\n        //On transforme les citations en array\r\n        const keyArray = Object.keys(citations);\r\n        //Sélectionne une citation au hasard\r\n        const randomKey = keyArray[Math.floor(Math.random() * keyArray.length)];\r\n        //Si la citation est la même que la précédente, génère une nouvelle citation\r\n        if (this.setState.citation === citations[randomKey].citation) {\r\n            this.genererCitation();\r\n            return;\r\n        }\r\n        // Assigne la nouvelle citation aléatoire à la variable state\r\n        this.setState(citations[randomKey]);\r\n    };\r\n\r\n    //Rendu dans le DOM. La citation prend en \"props\" sa propre variable state\r\n    render() {\r\n        return ( <\r\n            div >\r\n            <\r\n            Citation details = {\r\n                this.state\r\n            }\r\n            /> <\r\n            button onClick = {\r\n                e => this.genererCitation(e)\r\n            } > Citation suivante < /button> < /\r\n            div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = {\r\n  citation1: {\r\n    auteur: 'Socrate',\r\n    citation: 'Ce qui fait l\\'homme, c\\'est sa grande faculté d\\'adaptation.',\r\n   },\r\n  citation2: {\r\n    auteur: 'Confucius',\r\n    citation: 'Choisissez un travail que vous aimez et vous n\\'aurez pas à travailler un seul jour de votre vie.',\r\n  },\r\n  citation3: {\r\n    auteur: 'Léonard De Vinci',\r\n    citation: 'La simplicité est la sophistication suprême.',\r\n  },\r\n  citation4: {\r\n    auteur: 'Platon',\r\n    citation: 'La musique donne une âme à nos coeurs et des ailes à la pensée.',\r\n  },\r\n  citation5: {\r\n    auteur: 'Bertrand Russell',\r\n    citation: 'L\\'ennui dans ce monde, c\\'est que les idiots sont sûrs d\\'eux et les gens sensés pleins de doutes.',\r\n  },\r\n  citation6: {\r\n    auteur: 'Voltaire',\r\n    citation: 'Plus les hommes seront éclairés, et plus ils seront libres.',\r\n  },\r\n  citation7: {\r\n    auteur: 'Aristote',\r\n    citation: 'L\\'ignorant affirme, le savant doute, le sage réfléchit.',\r\n  },\r\n  citation8: {\r\n    auteur: 'Averroès',\r\n    citation: 'L\\'aveugle se détourne de la fosse où le clairvoyant se laisse tomber.',\r\n  },\r\n  citation9: {\r\n    auteur: 'Gandhi',\r\n    citation: 'La vie est un mystère qu\\'il faut vivre, et non un problème à résoudre.',\r\n  },\r\n  citation10: {\r\n    auteur: 'Confucius',\r\n    citation: 'Exige beaucoup de toi-même et attends peu des autres. Ainsi beaucoup d\\'ennuis te seront épargnés.',\r\n  }\r\n};"],"sourceRoot":""}